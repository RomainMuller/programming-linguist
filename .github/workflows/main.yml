---
name: Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['10']

    name: Node ${{ matrix.node }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}

      - name: Locate Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |-
            ${{ runner.os }}-node${{ matrix.node }}-
            ${{ runner.os }}-

      - name: Install
        run: |-
          yarn install --frozen-lockfile

      - name: Compile TypeScript
        run: |-
          yarn build

      - name: Report Coverage
        uses: paambaati/codeclimate-action@v2.7.5
        with:
          coverageCommand: |-
            yarn test:coverage
          coverageLocations: ${{ github.workspace }}/coverage/lcov.info:lcov
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

      - name: Diff Test
        run: |-
          MODIFIED_FILES=$(git status --porcelain=v2)
          if [ ! -z "${MODIFIED_FILES}" ]; then
            echo "Found uncommitted changes:"
            echo "${MODIFIED_FILES}"
            exit -1
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: |-
            ${{ github.workspace }}/
            !${{ github.workspace }}/node_modules

  test:
    needs: build

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['12', '14']

    name: Node ${{ matrix.node }}

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: build-output

      - name: Set up node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |-
            ${{ runner.os }}-node${{ matrix.node }}-
            ${{ runner.os }}-

      - name: Install
        run: |-
          yarn install --frozen-lockfile

      - name: Test
        run: |-
          yarn test

  publish:
    if: github.event_name != 'pull_request'

    needs: test
    runs-on: ubuntu-latest
    name: Publish

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: build-output

      - name: Set up node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 10
          always-auth: true
          registry-url: https://npm.pkg.github.com
          scope: '@${{ github.repository_owner }}'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Locate Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |-
            ${{ runner.os }}-node${{ matrix.node }}-
            ${{ runner.os }}-

      - name: Determine Version
        id: determine-version
        run: |-
          BASE_VERSION=$(node -p 'require("${{ github.workspace }}/package.json").version;')

          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "::set-output name=tag::next"
            echo "::set-output name=version::${BASE_VERSION}-pre.${{ github.sha }}"
          else
            echo "::set-output name=tag::latest"
            echo "::set-output name=version::${BASE_VERSION}"
          fi

      - name: Prepare
        id: prepare
        run: |-
          node <<-\EOS
          const fs = require('fs');

          const md = JSON.parse(fs.readFileSync('${{ github.workspace }}/package.json', { encoding: 'utf-8' }));

          md.name = `@${'${{ github.repository_owner }}'.toLowerCase()}/${md.name.replace(/^@[^/]+\//, '')}`;
          md.version = '${{ steps.determine-version.outputs.version }}';

          delete md.devDependencies;

          delete md.scripts.build;
          delete md.scripts.lint;
          delete md.scripts.test;
          delete md.scripts['test:coverage'];
          if (Object.keys(md.scripts).length === 0) {
            delete md.scripts;
          }

          const data = JSON.stringify(md, null, 2);

          console.log(`Updating package.json to:\n${data}`);

          fs.writeFileSync('${{ github.workspace }}/package.json', data);
          EOS

          echo "::set-output name=filename::$(npm pack)"

      - name: Publish to GitHub
        run: |-
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name  "${{ github.actor }}"

          yarn publish                                                          \
            --no-git-tag-version                                                \
            --new-version "${{ steps.determine-version.outputs.version }}"      \
            --tag "${{ steps.determine-version.outputs.tag }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_github_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.determine-version.outputs.version }}
          release_name: ${{ steps.determine-version.outputs.version }}
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/main' }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/tar+gzip
          asset_name: ${{ steps.prepare.outputs.filename }}
          asset_path: ${{ github.workspace }}/${{ steps.prepare.outputs.filename }}
          upload_url: ${{ steps.create_github_release.outputs.upload_url }}

  approve-dependabot:
    name: Approve Dependabot
    runs-on: ubuntu-latest
    needs: [test]

    if: github.event_name == 'pull_request' && (github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]')

    steps:
      - name: Request @dependabot auto-merge
        uses: ahmadnassri/action-dependabot-auto-merge@v2
        with:
          command: 'squash and merge'
          github-token: ${{ secrets.PRIVILEGED_GITHUB_TOKEN }}
          target: minor
