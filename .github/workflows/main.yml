---
name: Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['10']

    name: Build (Node ${{ matrix.node }})

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2.1.0
        with:
          node-version: ${{ matrix.node }}

      - name: Locate Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |-
            ${{ runner.os }}-node${{ matrix.node }}-
            ${{ runner.os }}-

      - name: Install
        run: |-
          yarn install --frozen-lockfile

      - name: Compile TypeScript
        run: |-
          yarn build

      - name: Report Coverage
        uses: paambaati/codeclimate-action@v2.6.0
        with:
          coverageCommand: |-
            yarn test
          coverageLocations: ${{ github.workspace }}/coverage/lcov.info:lcov
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

      - name: Diff Test
        run: |-
          MODIFIED_FILES=$(git status --porcelain=v2)
          if [ ! -z "${MODIFIED_FILES}" ]; then
            echo "Found uncommitted changes:"
            echo "${MODIFIED_FILES}"
            exit -1
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: |-
            ./
            !./node_modules

  test:
    needs: build

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['12', '14']

    name: Test (Node ${{ matrix.node }})

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: build-output

      - name: Set up node
        uses: actions/setup-node@v2.1.0
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |-
            ${{ runner.os }}-node${{ matrix.node }}-
            ${{ runner.os }}-

      - name: Install
        run: |-
          yarn install --frozen-lockfile

      - name: Test
        run: |-
          yarn test

  publish:
    if: github.event_name != 'pull_request'

    needs: test
    runs-on: ubuntu-latest
    name: Publish

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: build-output

      - name: Set up node
        uses: actions/setup-node@v2.1.0
        with:
          node-version: 10
          registry-url: https://npm.pkg.github.com

      - name: Locate Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |-
            ${{ runner.os }}-node${{ matrix.node }}-
            ${{ runner.os }}-

      - name: Determine Version
        id: determine-version
        run: |-
          BASE_VERSION=$(node -p 'require("./package.json").version;')

          if [ -z "${{ github.event.pull_request.number }}"]; then
            TAG=latest
            VERSION=${BASE_VERSION}+${{ github.sha }}
          else
            TAG=pr-${{ github.event.pull_request.number }}
            VERSION=${BASE_VERSION}-${TAG}
          fi

          echo "::set-output name=tag::${TAG}"
          echo "::set-output name=version::${VERSION}"

      - name: Scope Package
        run: |-
          node -e <<-EOF
            const fs = require('fs');

            const md = JSON.parse(fs.readFileSync('./package.json', { encoding: 'utf-8' }));

            md.name = `@${{ github.repository_owner }}/${md.name.replace(/^@[^/]+\//, '')}`;

            delete md.devDependencies;

            delete md.scripts.build;
            delete md.scripts.lint;
            delete md.scripts.test;
            if (Object.keys(md.scripts).length === 0) {
              delete md.scripts;
            }

            fs.writeFileSync('./package.json', JSON.stringify(md, null, 2));
          EOF

      - name: Publish to GitHub
        run: |-
          yarn publish --new-version "${{ steps.determine-version.outputs.version }}" --tag "${{ steps.determine-version.outputs.tag }}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
